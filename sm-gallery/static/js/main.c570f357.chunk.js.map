{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","results","_this2","axios","get","then","res","data","setState","react_default","a","createElement","CalciteThemeProvider_default","TopNav_default","className","TopNav","href","src","target","map","item","Card_default","key","id","Card","thumbnail","caption","owner","alt","title","Button_default","url","onClick","console","log","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","width","maxWidth","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gUAmEeA,cA7Cb,SAAAA,IAAe,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACbC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,QAAS,IAHER,mFAOG,IAAAS,EAAAN,KAClBO,IAAMC,IAAN,iHACGC,KAAK,SAAAC,GACJ,IAAIL,EAAUK,EAAIC,KAAKN,QACvBC,EAAKM,SAAS,CAAEP,+CAKpB,OACAQ,EAAAC,EAAAC,cAACC,EAAAF,EAAD,KACED,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAQI,UAAU,mBAChBL,EAAAC,EAAAC,cAACI,EAAA,YAAD,CAAaC,KAAK,IAAIC,IAAK,gFAC3BR,EAAAC,EAAAC,cAACI,EAAA,YAAD,sCACAN,EAAAC,EAAAC,cAACI,EAAA,WAAD,KACEN,EAAAC,EAAAC,cAACI,EAAA,WAAD,CAAYC,KAAK,uCAAuCE,OAAO,UAA/D,iBACAT,EAAAC,EAAAC,cAACI,EAAA,WAAD,CAAYC,KAAK,gEAAgEE,OAAO,UAAxF,eAGJT,EAAAC,EAAAC,cAAA,OAAKG,UAAU,2BACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,aACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gGACZlB,KAAKI,MAAMC,QAAQkB,IAAI,SAAAC,GAAI,OAC1BX,EAAAC,EAAAC,cAACU,EAAAX,EAAD,CAAMI,UAAU,wCAAwCQ,IAAKF,EAAKG,IAChEd,EAAAC,EAAAC,cAACa,EAAA,UAAD,CAAWV,UAAU,aAAaG,IAAK,qDAAuDG,EAAKG,GAAK,SAAWH,EAAKK,UAAWC,QAAS,UAAYN,EAAKO,MAAOC,IAAKR,EAAKS,QAC9KpB,EAAAC,EAAAC,cAACa,EAAA,YAAD,CAAaV,UAAU,gBACrBL,EAAAC,EAAAC,cAACa,EAAA,UAAD,KAAYJ,EAAKS,OACjBpB,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,CAAQM,KAAMI,EAAKW,IAAKb,OAAO,SAASc,QAAS,kBAAMC,QAAQC,IAAI,aAAnE,6BAnCEC,IAAMC,WCTJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACDlC,EAAAC,EAAAC,cAACiC,EAAD,CAAK9B,UAAW,CAAE+B,MAAO,SAAWC,SAAU,UAClDC,SAASC,eAAe,SDyHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9C,KAAK,SAAA+C,GACjCA,EAAaC","file":"static/js/main.c570f357.chunk.js","sourcesContent":["import React from 'react';\n/*import data from \"./data.json\";*/\n/*import results from \"./Data.js\";*/\nimport axios from 'axios';\nimport CalciteThemeProvider from 'calcite-react/CalciteThemeProvider';\nimport TopNav, {\n  TopNavBrand,\n  TopNavTitle,\n  TopNavList,\n  TopNavLink\n} from 'calcite-react/TopNav';\nimport Card, {\n  CardTitle,\n  CardContent,\n  CardImage\n} from 'calcite-react/Card';\nimport Button from 'calcite-react/Button';\n\n\n//const api_call = await fetch('https://www.arcgis.com/sharing/rest/search?q=type:storymap&f=pjson&sortorder=desc&sortfield=modified&num=1000');\n\nclass App extends React.Component {\n  constructor () {\n    super();\n    this.state = {\n      results: []\n    }\n  }\n\ncomponentDidMount() {\n  axios.get(`https://www.arcgis.com/sharing/rest/search?q=type:storymap&f=pjson&sortorder=desc&sortfield=modified&num=1000`)\n    .then(res => {\n      let results = res.data.results;\n      this.setState({ results });\n    });\n}\n\nrender() {\n  return (\n  <CalciteThemeProvider>\n    <TopNav className=\"top-nav fade-in\">\n      <TopNavBrand href=\"#\" src={'https://storymaps-nextgen.arcgis.com/beta/static/images/story-maps-logo.png'} />\n      <TopNavTitle>ArcGIS StoryMaps Beta Gallery</TopNavTitle>\n      <TopNavList>\n        <TopNavLink href=\"https://storymaps-nextgen.arcgis.com\" target=\"_blank\">Try the Beta!</TopNavLink>\n        <TopNavLink href=\"https://community.esri.com/community/story-maps-beta-feedback\" target=\"_blank\">Community</TopNavLink>\n      </TopNavList>\n    </TopNav>\n    <div className=\"grid-container leader-1\">\n      <div className=\"column-24\">\n        <div className=\"padding-leader-1 block-group block-group-4-up tablet-block-group-3-up phone-block-group-1-up\">\n          {this.state.results.map(item => (\n            <Card className=\"card block trailer-1 animated-fade-in\" key={item.id}>\n              <CardImage className=\"card-image\" src={\"https://www.arcgis.com/sharing/rest/content/items/\" + item.id + \"/info/\" + item.thumbnail} caption={`Author:` + item.owner} alt={item.title}/>\n              <CardContent className=\"card-content\">\n                <CardTitle>{item.title}</CardTitle>\n                <Button href={item.url} target=\"_blank\" onClick={() => console.log('clicked')}>View Story</Button>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>  \n    </div> \n \n  </CalciteThemeProvider>\n)}};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n        <App className={{ width: '1440px' , maxWidth: '96vw' }}/>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}